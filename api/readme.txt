1. собираешь образ командой docker compose up (если ранее не собирал)
2. в IDE в которой работаешь, рядом с директорией, в которой лежит файл docker compose, открываешь второй терминал
    во втором терминале прописываешь команду 
    docker compose exec web python /code/api/manage.py migrate - для миграции бд
3. созадешь суперюзера в этом же втором терминале командой: 
    docker compose exec web python /code/api/manage.py createsuperuser
    почту и пароль придумываешь ему любой
4. нужно заполнить бд данными, делаешь в терминале команду:
    1. docker compose exec web python /code/api/manage.py import_activ - для записи сфер деятельности в бд
    2. docker compose exec web python /code/api/manage.py import_categ - для записи категорий этих сфер 
    3. docker compose exec web python /code/api/manage.py import_spec - для записи специализаций этих категорий
    4. docker compose exec web python /code/api/manage.py import_country - для записи стран

5. заходишь в админку (по адресу http://127.0.0.1:8000/admin/), создаешь 4 счета (2 в рублях, 2 в дол), затем создаешь 2 фонда (название какие хочешь дай) и к этим двум фондам привязываешь 4 счета
 (у каждого фонда должен быть один рублевый и один дол счет)
6. в админке заходишь к пользователям, выбираешь того, которого ты создал, и внутри этой записи ставишь галочку, что он оплатил вступительный взнос (не важно в какой валюте), сохраняешь 
 и потом можешь опять войти в этого пользователя, чтоб взять его реф.ссылку

по сути это базовые вещи которые нужно сделать
редис и селери запускать не обязательно, они нужны при создании нового пользователя, для отправки ему письма с токенам для подтверждения почты
и когда ты будешь отправлять post на api/v1/register/<str:refer>/ у тебя система будет подвисать из-за этого, можно еще раз второй запрос отправить, чтоб ошибку получить и дальше пойти

в проекте есть файл requests.http, можешь его посмотреть как я запросы отправлял
по порядку:
1 регистрация
post на http://127.0.0.1:8000/api/v1/register/<str:refer>/ - где /<str:refer>/ реф код, который формируется после проставления галочки об оплате

2 логин http://127.0.0.1:8000/api/v1/login/ - нужно передать почту и пароль в формате:
{
    "email": "bla@gmail.com",
    "password": "password"
}
(все запросы нужно передавать так)
в ответе ты должен получить токен, который потом нужно передавать при запросах в формате 
Content-Type: application/json
Authorization: TOKEN 2dc162ec8665d5dad994f61029aabb8089a53e33841d73fbb93dc18f665cfe2c

3. по адресу http://127.0.0.1:8000/api/v1/schema/docs/ находятся все эндпоинты с типом запросов к ним

4. По приложениям:
    accounts - pдесь инфа по фондам и счетам, нам нужно будет выводить инфо по движению денег юзера в лк, но я пока не реализовал это, так что там нет ни чего, вся инфа в админке пока лежит
    
    categories - здесь у нас все сферы, категории и специализации. Все они записаны в 3х файлах activ.csv, cat.csv, spec.csv. После команды, которую ты внес ранее (docker compose exec python /code/api/manage.py import_activ и др), выбор этих данных должен быть на отдельной странице, то есть юзер сначала получает все сферы,
    делает выбор сферы, затем на основе этого выбора он получает все категории, выбирает и уже на основе выбора категории, получает специализации этой категории, у меня все это реализовано в трех вью:
    path('api/v1/activity/', ActivityApiView.as_view(), name='activity'),
    path('api/v1/activity/<str:activity>/categories/', CategApiView.as_view(), name='categories'),
    path('api/v1/categories/<str:categories>/specializations/', SpecializationApiView.as_view(), name='specializations'),
    и страница с выбором этих специализаций должна появялться, когда человек просто хочет посмотреть, когд аюзер хочет отметить свои специализации, когда создают заказ, также должна появляться страница с этим выбором
    для записи специализаций юзера, есть адрес: 'http://127.0.0.1:8000/api/v1/user-specialization' - сам юзер передается автоматически, нужно только передать специализации

    company_docs - я сделал эту таблицу на будущее, чтоб вносить в нее разные доки и выводить на страницах или в лк юзеров, но еще в этом приложении есть получение реф.ссылки, адрес: http://127.0.0.1:8000/api/v1/get_referal_link/ - метод только пост, человек должен заполнить поля: name, email, 
    specialization, work_links(в формате простого текста разные ссылки через запятую)  и подгрузить 5 файлов. name, email specialization - обязательные поля, остальные по желанию, специализацию он должен выбрать из приложения categoties, которые я писал выше

    contest - не реализовано, пока пропускаем
    
    faq - там разные темы и вопросы, вью только на чтение. Вью только для аутентифицированных, поэтому нужно передать TOKEN
    
    main_users - главное приложение по юзерам, в этом приложении стандартная модель юзера (CustomUser), модель UserInfo, которая имеет связь 1к1 с CustomUser, все поля там не обязательные, создается запись в ней по адресу http://127.0.0.1:8000/api/v1/user/ доступ только аутентиф, сам юзер для записи передается автоматически (запросы можно использовать все)
    в формате :
    {
        "user": "его id"
    }
    и остальные поля по желанию, выводить соответственно все эти поля так же нужно владельцу в лк, доступ только для владельца настроен.
    USerInfoCompany - таблица в случае если юзер это компания, там заполняются данные по компании, связь так же 1к1 с CustomUser, сам юзер передается автоматически, в запросе нужно указывать токен юзера

    orders - заказы, для создания заказа нужно отправить post на http://127.0.0.1:8000/api/v1/orders. В запросе нужно передать:
    {
        "name": "название заказа",
        "description": описание заказа",
        "price": "цена",
        "currency": "валюта", # RUB or USD
        "specialization": "", #ее нужно получить так, как я писал выше, то есть перейти на страницу специализаций и фильтрами выбор юзера передать в заказ

    }
    создать заказ может только авторизованный, посмотреть все заказы и детали по одному заказу все
    есть еще путь enroll (он формируется http://127.0.0.1:8000/api/v1/orders/pk/enroll) - это откликнуться на заказ
    
